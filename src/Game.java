import fruitNinjaHelper.cs3331Blade;
import fruitNinjaHelper.cs3331FruitNinjaFrame;
import fruitNinjaHelper.cs3331FruitNinjaGame;
import fruitNinjaHelper.cs3331ScoreController;
import java.lang.Math;
import fruitNinjaHelper.Constants;

public class Game extends cs3331FruitNinjaGame {
    private Choppable myObject; // fruits/bomb
    private cs3331Blade myBlade; // the blade
    private cs3331ScoreController score; // the overall score of the game

    /**
     * Constructor for the Game class
     * 
     * @param frame - the frame created in the App class
     */
    public Game(cs3331FruitNinjaFrame frame) {
        // creating the score
        score = new cs3331ScoreController();
        // adding the score on top
        frame.setTop(score);

        // creating the blade
        myBlade = new cs3331Blade("myBlade");
        // adding the blade to the game
        this.addBlade(myBlade);
    }

    /**
     * Moves the fruits/bomb and checks if they have been sliced
     * 
     * @param object - a fruit/bomb generated by the launch method
     */
    public void updateChoppable(Choppable object) {

        object.moveChoppableObject();

        if (myBlade.checkIntersection(object)) {
            object.chopChoppableObject();
            // adding the score
            score.addToScore(object.getScore());
        }

    }

    /**
     * Launches random fruits/a bomb
     */
    @Override
    public Choppable launchItem() {
        int rand = (int) (Math.random() * 5) + 1;

        switch (rand) {
            case 1: // launching an apple and giving it the score of 2
                myObject = new Fruits(Constants.APPLE_PATH, 2);
                return myObject;

            case 2: // launching a lemon and giving it the score of 2
                myObject = new Fruits(Constants.LEMON_PATH, 2);
                return myObject;
            case 3: // launching a peach and giving it a score of 3
                myObject = new Fruits(Constants.PEACH_PATH, 3);
                return myObject;
            case 4: // launching a pear and giving it a score of 5
                myObject = new Fruits(Constants.PEAR_PATH, 5);
                return myObject;
            case 5: // launching a bomb
                myObject = new Bomb();
                return myObject;

        }

        return null;
    }

    // Do not modify anything below this line
    @Override
    public void updateChoppableHelper() {
        this.updateChoppable(this.getCurrentItem());
    }
}